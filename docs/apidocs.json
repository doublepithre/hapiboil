{"openapi":"3.0.0","info":{"version":"1.0.0","title":"Empauwer Backend API documenations","description":"# Introduction\nThis API is documented in **OpenAPI 3.0 format**. \\\nSee https://redocly.github.io/redoc/ for more information.\n"},"servers":[{"url":"http://localhost:4585/em/api/v1","description":"Local development"},{"url":"https://empstag.x0pa.ai/em/api/v1/","description":"Staging environment"}],"tags":[{"name":"User","description":"Information about the user"},{"name":"Job","description":"Information about jobs"},{"name":"User Model","x-displayName":"The User Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/User\" />\n"},{"name":"Question Model","x-displayName":"The Question Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/Question\" />\n"},{"name":"Answer Model","x-displayName":"The Answer Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/answers\" />\n"},{"name":"Job Model","x-displayName":"The Job Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/job\" />\n"},{"name":"Detailed Job Model","x-displayName":"The Detailed Job Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/jobDetailed\" />\n"},{"name":"Job Application Model","x-displayName":"The Job Application Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/jobApplication\" />\n"},{"name":"Detailed Job Application Model","x-displayName":"The Detailed Job Application Model","description":"<SchemaDefinition schemaRef=\"#/components/schemas/jobApplicationDetailed\" />\n"}],"paths":{"/account":{"post":{"summary":"Create User","tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"type":"string","example":"me@mymail.com"},"password":{"type":"string","example":"password"},"accountType":{"type":"string","enum":["candidate","employer","mentor","superadmin","specialist"]}}}}}},"responses":{"201":{"description":"User successfully created","content":{"application/json":{"schema":{"type":"object","properties":{"userUuid":{"type":"string"},"userId":{"type":"number"},"email":{"type":"string"}}}}}},"400":{"description":"Failed to create user","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"boolean"},"message":{"description":"Describes reason for failure","type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/account',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'me@mymail.com', password: 'password', accountType: 'candidate'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/login":{"post":{"summary":"Login user","tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"type":"string","example":"me@mymail.com"},"password":{"type":"string","example":"password"}}}}}},"responses":{"200":{"description":"Successful login","content":{"application/json":{"schema":{"type":"object","properties":{"User":{"$ref":"#/components/schemas/User"},"token":{"type":"string","description":"JWT to be used for authorization"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/login',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'me@mymail.com', password: 'password'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/me":{"get":{"summary":"Get user info","security":[{"bearerAuth":[]}],"tags":["User"],"responses":{"200":{"description":"Successfully get user information","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/User"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/account/me',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/me/meta?metaKey={metaKey}":{"get":{"summary":"Get user's meta data","security":[{"bearerAuth":[]}],"tags":["User"],"responses":{"200":{"description":"Successfully get user's meta data information","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/meta"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/account/me/meta',\n  qs: {metaKey: '{metaKey}'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/me/meta":{"patch":{"summary":"Update user's meta data info","parameters":[{"name":"userUuid","in":"path","description":"UUID of User","required":true,"schema":{"type":"string"}}],"security":[{"bearerAuth":[]}],"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"metaKey":{"type":"string"},"metaValue":{"type":"string"}}}}}},"responses":{"200":{"description":"Successfully updated user's meta data info","content":{"application/json":{"schema":{"$ref":"#/components/schemas/meta"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/account/me/meta',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {metaKey: 'string', metaValue: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/{userUuid}/":{"patch":{"summary":"Update user info","parameters":[{"name":"userUuid","in":"path","description":"UUID of User","required":true,"schema":{"type":"string"}}],"security":[{"bearerAuth":[]}],"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"active":{"type":"boolean","nullable":true},"firstName":{"type":"string","nullable":true},"lastName":{"type":"string","nullable":true},"isAdmin":{"type":"boolean","nullable":true},"tzid":{"type":"number","nullable":true},"primaryMobile":{"type":"string","nullable":true},"roleId":{"type":"number","nullable":true}}}}}},"responses":{"200":{"description":"Successfully updated user info","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/account/%7BuserUuid%7D/',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    active: true,\n    firstName: 'string',\n    lastName: 'string',\n    isAdmin: true,\n    tzid: 0,\n    primaryMobile: 'string',\n    roleId: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/send-verify":{"post":{"summary":"Get Verification Email","security":[{"bearerAuth":[]}],"tags":["User"],"responses":{"200":{"description":"Successfully get verification email","content":{"application/json":{"schema":{"properties":{"requestId":{"type":"number"},"requestKey":{"type":"string"},"userId":{"type":"number"},"expiresAt":{"type":"string"},"resourceType":{"type":"string"},"actionType":{"type":"string"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/account/send-verify',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/verify/{emailVerificationToken}":{"patch":{"summary":"Verify Email","tags":["User"],"parameters":[{"name":"emailVerificationToken","in":"path","description":"Email verification token from ?","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"isEmailVerified":{"type":"boolean"}}}}}},"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"type":"object","properties":{"message":{"type":"string","example":"Email Verification successful"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/account/verify/%7BemailVerificationToken%7D',\n  headers: {'content-type': 'application/json'},\n  body: {isEmailVerified: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/forgot-password":{"post":{"summary":"Forgot user password","tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"type":"string"}}}}}},"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"properties":{"requestId":{"type":"number"},"requestKey":{"type":"string"},"userId":{"type":"number"},"expiresAt":{"type":"string"},"resourceType":{"type":"string"},"actionType":{"type":"string"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/account/forgot-password',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/reset-password/{passwordResetToken}":{"patch":{"summary":"Reset password","tags":["User"],"parameters":[{"name":"passwordResetToken","in":"path","description":"Password reset token from ?","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"password1":{"type":"string"},"password2":{"type":"string"}}}}}},"responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"type":"object","properties":{"message":{"type":"string","example":"Password updation successful"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/account/reset-password/%7BpasswordResetToken%7D',\n  headers: {'content-type': 'application/json'},\n  body: {password1: 'string', password2: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/empauwer-me":{"get":{"summary":"Get Empauwer Me Questionnaire","tags":["User"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"questions":{"type":"array","items":{"$ref":"#/components/schemas/Question"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/account/empauwer-me',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/empauwer-all":{"get":{"summary":"Get Empauwer All Questionnaire","tags":["User"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"questions":{"type":"array","items":{"$ref":"#/components/schemas/Question"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/account/empauwer-all',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/account/profile":{"post":{"summary":"Create profile/Answer Questions","tags":["User"],"security":[{"bearerAuth":[]}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"responses":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/account/profile',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: [{questionId: 0, answer: 0}],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]},"get":{"summary":"Get profile/Answered Questions","tags":["User"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"responses":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/account/profile',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job?limit={limit}&offset={skip}&sort=createdAt:desc&jobTypeId=1&jobFunctionId=1&jobIndustryId=1&jobLocationId=1&minExp=1":{"post":{"summary":"Create Job","tags":["Job"],"security":[{"bearerAuth":[]}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/job"}}}},"responses":{"201":{"description":"Job created","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobDetailed"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/job',\n  qs: {\n    limit: '{limit}',\n    offset: '{skip}',\n    sort: 'createdAt:desc',\n    jobTypeId: '1',\n    jobFunctionId: '1',\n    jobIndustryId: '1',\n    jobLocationId: '1',\n    minExp: '1'\n  },\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    jobName: 'string',\n    jobDescription: 'string',\n    jobIndustryId: 0,\n    jobFunctionId: 0,\n    jobTypeId: 0,\n    jobLocationId: 0,\n    minExp: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]},"get":{"summary":"Get jobs","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/paginatedAllJobs"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job',\n  qs: {\n    limit: '{limit}',\n    offset: '{skip}',\n    sort: 'createdAt:desc',\n    jobTypeId: '1',\n    jobFunctionId: '1',\n    jobIndustryId: '1',\n    jobLocationId: '1',\n    minExp: '1'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/job-details-options":{"get":{"summary":"Get job details options","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"function":{"type":"array","items":{"type":"object","properties":{"jobFunctionId":{"type":"number"},"jobFunctionName":{"type":"string"}}}},"industry":{"type":"array","items":{"type":"object","properties":{"jobIndustryId":{"type":"number"},"jobIndustryName":{"type":"string"}}}},"location":{"type":"array","items":{"type":"object","properties":{"jobLocationId":{"type":"number"},"jobLocationName":{"type":"string"}}}},"type":{"type":"array","items":{"type":"object","properties":{"jobTypeId":{"type":"number"},"jobTypeName":{"type":"string"}}}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/job-details-options',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/{jobUuid}":{"get":{"summary":"Get job by uuid","tags":["Job"],"security":[{"bearerAuth":[]}],"parameters":[{"name":"jobUuid","in":"path","description":"UUID of job","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobDetailedWithIsApplied"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/%7BjobUuid%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]},"patch":{"summary":"Update job by uuid","tags":["Job"],"security":[{"bearerAuth":[]}],"parameters":[{"name":"jobUuid","in":"path","description":"UUID of job","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/job"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobDetailed"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/job/%7BjobUuid%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    jobName: 'string',\n    jobDescription: 'string',\n    jobIndustryId: 0,\n    jobFunctionId: 0,\n    jobTypeId: 0,\n    jobLocationId: 0,\n    minExp: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/recruiter?limit={limit}&offset={skip}&sort=createdAt:desc&jobTypeId=1&jobFunctionId=1&jobIndustryId=1&jobLocationId=1&minExp=1":{"get":{"summary":"Get recruiter jobs","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/paginatedRecruiterJobs"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/recruiter',\n  qs: {\n    limit: '{limit}',\n    offset: '{skip}',\n    sort: 'createdAt:desc',\n    jobTypeId: '1',\n    jobFunctionId: '1',\n    jobIndustryId: '1',\n    jobLocationId: '1',\n    minExp: '1'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/profile/{jobId}":{"get":{"summary":"Get empauwer all responses","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"responses":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/profile/%7BjobId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]},"post":{"summary":"Answer empauwer all responses","description":"This is an upsert command hence it will update/insert responses.","tags":["Job"],"security":[{"bearerAuth":[]}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"responses":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/job/profile/%7BjobId%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: [{questionId: 0, answer: 0}],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/applied?limit={limit}&offset={skip}&sort=createdAt:desc&jobTypeId=1&jobFunctionId=1&jobIndustryId=1&jobLocationId=1&minExp=1":{"get":{"summary":"Get applied jobs","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"},"appliedJobs":{"type":"array","items":null,"$ref":"#/components/schemas/jobApplicationDetailed"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/applied',\n  qs: {\n    limit: '{limit}',\n    offset: '{skip}',\n    sort: 'createdAt:desc',\n    jobTypeId: '1',\n    jobFunctionId: '1',\n    jobIndustryId: '1',\n    jobLocationId: '1',\n    minExp: '1'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/apply":{"post":{"summary":"Apply to jobs","description":"This is an upsert command hence it will update/insert jobs.","tags":["Job"],"security":[{"bearerAuth":[]}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobApplicationWithOnlyJobId"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobApplication"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:4585/em/api/v1/job/j/apply',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {jobId: 0},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/withdraw":{"patch":{"summary":"Withdraw from an Applied Job","tags":["Job"],"security":[{"bearerAuth":[]}],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"jobId":{"type":"string","example":"1"},"userId":{"type":"string","example":"182"}}}}}},"responses":{"201":{"description":"Application Withdrawn","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/jobApplication"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'http://localhost:4585/em/api/v1/job/j/withdraw',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {jobId: '1', userId: '182'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/applications/{jobId}?limit={limit}&&offset={skip}":{"get":{"summary":"Get all Applicants","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"},"applications":{"type":"array","items":null,"$ref":"#/components/schemas/applicationsWithApplicant"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/applications/%7BjobId%7D',\n  qs: {limit: '{limit}', offset: '{skip}'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/application/{userId}":{"get":{"summary":"Get Applicant's profile","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/User"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/application/%7BuserId%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/recommended-talents":{"get":{"summary":"Get all recommended talents","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/paginatedUsers"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/recommended-talents',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}},"/job/j/recommendations":{"get":{"summary":"Get recommended jobs for user","description":"Note this route requires data science server to be running.\n\nReturns list of recommended jobs in sorted order. i.e. First element is the most recommended.\n","tags":["Job"],"security":[{"bearerAuth":[]}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/jobDetailed"}}}}},"409":{"description":"Questionnaire is not completed yet","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string","example":"Questionnaire Not Done"}}}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'http://localhost:4585/em/api/v1/job/j/recommendations',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"}]}}},"components":{"securitySchemes":{"bearerAuth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}},"schemas":{"User":{"type":"object","properties":{"userId":{"type":"number"},"useruuid":{"type":"number"},"email":{"type":"string"},"isEmailVerified":{"type":"boolean"},"userTypeId":{"type":"number"},"roleId":{"type":"number"},"active":{"type":"boolean"},"companyId":{"type":"number"},"companyUuid":{"type":"number"},"firstName":{"type":"string"},"lastName":{"type":"string"},"picture":{"type":"string"},"isAdmin":{"type":"boolean"},"tzid":{"type":"number"},"primaryMobile":{"type":"string"},"roleName":{"type":"string"},"userTypeName":{"type":"string"}}},"Question":{"type":"object","properties":{"questionId":{"type":"string"},"questioName":{"type":"string"},"questionConfig":{"$ref":"#/components/schemas/questionConfig"},"questionTypeName":{"type":"string","enum":["scale5","scale10","subjective","single_choice","multiple_choice","yes_no","integer"]}}},"questionConfig":{"type":"object","properties":{"desc":{"type":"string","description":"Detailed Question descriptions","nullable":true},"options":{"type":"array","items":{"type":"object","description":"Options for Multiple choice/single choice questions","properties":{"optionId":{"type":"number"},"optionName":{"type":"string"}}}}}},"answers":{"type":"object","properties":{"questionId":{"type":"number"},"answer":{"oneOf":[{"type":"number","description":"For scale/integer/single choice questions"},{"type":"string","description":"For free text questions"},{"type":"array","description":"For multiple choice questions","items":{"type":"number"}}]}}},"job":{"type":"object","properties":{"jobName":{"type":"string"},"jobDescription":{"type":"string"},"jobIndustryId":{"type":"number"},"jobFunctionId":{"type":"number"},"jobTypeId":{"type":"number"},"jobLocationId":{"type":"number"},"minExp":{"type":"number"}}},"jobDetailed":{"type":"object","description":"This extends the job model and provides more information.","allOf":[{"$ref":"#/components/schemas/job"}],"properties":{"jobId":{"type":"number"},"jobUuid":{"type":"string"},"companyId":{"type":"number"},"userId":{"type":"string","description":"ID of user who created the job"},"active":{"type":"boolean"},"isPrivate":{"type":"boolean"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"}}},"jobDetailedWithCreator":{"type":"object","description":"This extends the job model and provides more information.","allOf":[{"$ref":"#/components/schemas/job"},{"$ref":"#/components/schemas/jobDetailed"}],"properties":{"user":{"$ref":"#/components/schemas/User"}}},"jobApplication":{"type":"object","properties":{"applicationId":{"type":"number"},"jobId":{"type":"number"},"isApplied":{"type":"boolean"},"isWithdrawn":{"type":"boolean"},"status":{"type":"string"}}},"jobApplicationDetailed":{"type":"object","description":"This extends detailed jobs to include applications","allOf":[{"$ref":"#/components/schemas/jobApplication"}],"properties":{"applicationId":{"type":"number"},"job":{"$ref":"#/components/schemas/jobDetailed"}}},"jobApplicationWithOnlyJobId":{"type":"object","properties":{"jobId":{"type":"number"}}},"jobDetailedWithIsApplied":{"type":"object","description":"This extends the job model and provides more information.","allOf":[{"$ref":"#/components/schemas/job"},{"$ref":"#/components/schemas/jobDetailed"}],"properties":{"isApplied":{"type":"boolean"},"jobQuestionResponses":{"type":"array","items":{"$ref":"#/components/schemas/answers"}}}},"paginatedUsers":{"type":"object","description":"This is the schema for paginated users' response.","properties":{"count":{"type":"number"},"users":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}},"paginatedAllJobs":{"type":"object","description":"This is the schema for paginated jobs' response.","properties":{"count":{"type":"number"},"jobs":{"type":"array","items":{"$ref":"#/components/schemas/jobDetailedWithIsApplied"}}}},"paginatedRecruiterJobs":{"type":"object","description":"This is the schema for paginated recruiter jobs' response.","properties":{"count":{"type":"number"},"jobs":{"type":"array","items":{"$ref":"#/components/schemas/jobDetailedWithCreator"}}}},"applicationsWithApplicant":{"type":"object","description":"This is the schema for paginated all applicants profiles' response.","allOf":[{"$ref":"#/components/schemas/jobApplication"}],"properties":{"applicationId":{"type":"number"},"applicant":{"$ref":"#/components/schemas/User"}}},"meta":{"type":"object","description":"This is the schema for user's meta data.","properties":{"umetaId":{"type":"string"},"userId":{"type":"string"},"metaKey":{"type":"string"},"metaValue":{"type":"string"}}}}}}
