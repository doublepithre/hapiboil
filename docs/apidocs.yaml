openapi: "3.0.0"
info:
  version: 1.0.0
  title: Empauwer Backend API documenations
  description: |
    # Introduction
    This API is documented in **OpenAPI 3.0 format**. \
    See https://redocly.github.io/redoc/ for more information.
  
servers:
  - url: http://localhost:4585/em/api/v1
    description: Local development
  - url: https://empstag.x0pa.ai/em/api/v1/
    description: Staging environment
tags: 
  - name: User
    description: Information about the user

  - name: Job
    description: Information about jobs

  - name: User Model
    x-displayName: The User Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/User" />

  - name: Question Model
    x-displayName: The Question Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Question" />

  - name: Answer Model
    x-displayName: The Answer Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/answers" />
  - name: Job Model
    x-displayName: The Job Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/job" />

  - name: Detailed Job Model
    x-displayName: The Detailed Job Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/jobDetailed" />
  
  - name: Job Application Model
    x-displayName: The Job Application Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/jobApplication" />
    
  - name: Detailed Job Application Model
    x-displayName: The Detailed Job Application Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/jobApplicationDetailed" />

paths:
  /account:
    post:
      summary: Create User
      tags:
        - User
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: me@mymail.com
                password:
                  type: string
                  example: password
                accountType:
                  type: string
                  enum: [candidate,employer,mentor,superadmin,specialist]
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  userUuid:
                    type: string
                  userId:
                    type: number
                  email: 
                    type: string
        '400':
          description: Failed to create user
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    description: Describes reason for failure
                    type: string
                
  /login:
    post:
      summary: Login user
      tags:
        - User
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: me@mymail.com
                password:
                  type: string
                  example: password
  
      responses:
        '200':
          description: Successful login
          content:
            application/json: 
              schema:
                type: object
                properties: 
                    User: 
                      $ref: "#/components/schemas/User"
                    token:
                      type: string
                      description: JWT to be used for authorization 

  /account/me:
    get: 
      summary: Get user info
      security:
      - bearerAuth: []
      tags:
        - User
      responses:
        '200':
          description: Successfully get user information
          content:
            application/json: 
              schema:
                type: object
                $ref: "#/components/schemas/User"
  
  /account/me/meta:
    patch:
      summary: Update user's meta data info
      parameters:
        - name: userUuid
          in: path
          description: UUID of User
          required: true
          schema:
            type: string
      security:
      - bearerAuth: []
      tags:
        - User
      requestBody: 
        content:
          application/json: 
            schema:
              type: object
              properties:
                metaKey:
                  type: string
                metaValue:
                  type: string

      responses:
        '200':
          description: Successfully updated user's meta data info
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/meta"
    get: 
      summary: Get user's meta data
      security:
      - bearerAuth: []
      tags:
        - User
      responses:
        '200':
          description: Successfully get user's meta data information
          content:
            application/json: 
              schema:
                type: object
                $ref: "#/components/schemas/meta"

  /account/{userUuid}/: 
    patch:
      summary: Update user info
      parameters:
        - name: userUuid
          in: path
          description: UUID of User
          required: true
          schema:
            type: string
      security:
      - bearerAuth: []
      tags:
        - User
      requestBody: 
        content:
          application/json: 
            schema:
              type: object
              properties:
                active:
                  type: boolean
                  nullable: true
                firstName:
                  type: string
                  nullable: true
                lastName:
                  type: string
                  nullable: true
                isAdmin:
                  type: boolean
                  nullable: true
                tzid:
                  type: number
                  nullable: true
                primaryMobile:
                  type: string
                  nullable: true
                roleId:
                  type: number
                  nullable: true
      responses:
        '200':
          description: Successfully updated user info
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"
  
  /account/send-verify: 
    post: 
      summary: Get Verification Email
      security:
      - bearerAuth: []
      tags:
        - User
      responses:
        '200':
          description: Successfully get verification email
          content:
            application/json:                 
              schema: 
                properties:
                  requestId:
                    type: number
                  requestKey:
                    type: string
                  userId:
                    type: number 
                  expiresAt:
                    type: string
                  resourceType:
                    type: string
                  actionType:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string   
  
  /account/verify/{emailVerificationToken}:     
    patch: 
      summary: Verify Email
      tags:
        - User
      parameters:
        - name: emailVerificationToken
          in: path
          description: Email verification token from ?
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                isEmailVerified: 
                  type: boolean
                
      responses:
        '200':
          description: Success
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: Email Verification successful

  /account/forgot-password: 
    post: 
      summary: Forgot user password
      tags:
        - User
      requestBody: 
        content:
          application/json: 
            schema:
              type: object
              properties:
                email: 
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json: 
             schema: 
              properties:
                requestId:
                  type: number
                requestKey:
                  type: string
                userId:
                  type: number 
                expiresAt:
                  type: string
                resourceType:
                  type: string
                actionType:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
  /account/reset-password/{passwordResetToken}:
    patch: 
      summary: Reset password
      tags:
        - User
      parameters:
        - name: passwordResetToken
          in: path
          description: Password reset token from ?
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                password1: 
                  type: string
                password2:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: Password updation successful

  /account/empauwer-me:
    get:
      summary:  Get Empauwer Me Questionnaire
      tags:
      - User
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/Question"

  /account/empauwer-all:
    get:
      summary:  Get Empauwer All Questionnaire  
      tags:
      - User
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/Question"
  /account/profile:
    post:
      summary:  Create profile/Answer Questions
      tags:
      - User
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              type: array
              items:
                $ref: "#/components/schemas/answers"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: "#/components/schemas/answers"
    get:
      summary: Get profile/Answered Questions
      tags:
      - User
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: "#/components/schemas/answers" 

  /job:
    post: 
      summary: Create Job
      tags:
        - Job
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              $ref: "#/components/schemas/job"
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/job" 
    get: 
      summary: Get jobs
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/jobDetailedWithIsApplied" 

  /job/{jobUuid}:
    get: 
      summary: Get job by uuid
      tags:
        - Job
      security:
      - bearerAuth: []
      parameters:
        - name: jobUuid
          in: path
          description: UUID of job
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/jobDetailedWithIsApplied" 
    patch: 
      summary: Update job by uuid
      tags:
        - Job
      security:
      - bearerAuth: []
      parameters:
        - name: jobUuid
          in: path
          description: UUID of job
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              $ref: "#/components/schemas/job"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/jobDetailed" 

  /job/j/recruiter:
    get: 
      summary: Get recruiter jobs
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/jobDetailedWithCreator" 
  
  /job/profile/{jobId}:
    get: 
      summary: Get empauwer all responses
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/answers" 
    post: 
      summary: Answer empauwer all responses
      description: This is an upsert command hence it will update/insert responses.
      tags:
        - Job
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              type: array
              items:
                $ref: "#/components/schemas/answers"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/answers" 

  /job/j/applied:
    get: 
        summary: Get applied jobs
        tags:
          - Job
        security:
        - bearerAuth: []
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/jobApplicationDetailed"

  /job/j/apply:
    post: 
      summary: Apply to jobs
      description: This is an upsert command hence it will update/insert jobs.
      tags:
        - Job
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              $ref: "#/components/schemas/jobApplicationWithOnlyJobId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/jobApplication"

  /job/j/withdraw:
    patch: 
      summary: Withdraw from an Applied Job
      tags:
        - Job
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                  jobId:
                    type: string
                    example: "1"
                  userId:
                    type: string
                    example: "182"
                    
      responses:
        '201':
          description: Application Withdrawn
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/jobApplication"
                    

  /job/j/applications/{jobId}:
    get: 
      summary: Get all Applicants
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User" 

  /job/j/application/{userId}:
    get: 
      summary: Get Applicant's profile
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User" 

  
  /job/j/recommended-talents:
    get: 
      summary: Get all recommended talents
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object                
                $ref: "#/components/schemas/paginatedUsers" 

  /job/j/recommendations:
    get: 
      summary: Get recommended jobs for user
      description: | 
        Note this route requires data science server to be running.

        Returns list of recommended jobs in sorted order. i.e. First element is the most recommended.
      tags:
        - Job
      security:
      - bearerAuth: []
      responses:
        '409':
          description: Questionnaire is not completed yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Questionnaire Not Done
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/jobDetailed"

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      type: object
      properties:
        userId: 
          type: number
        useruuid:
          type: number
        email:
          type: string
        roleId:
          type: number
        active:
          type: boolean
        companyId:
          type: number
        companyUuid:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        picture:
          type: string
        isAdmin:
          type: boolean
        tzid:
          type: number
        primaryMobile:
          type: string
        userTypeName:
          type: string
    Question:
      type: object
      properties:
        questionId:
          type: string
        questioName:
          type: string
        questionConfig:
          $ref: "#/components/schemas/questionConfig"
        questionTypeName:
          type: string
          enum: ["scale5","scale10","subjective","single_choice","multiple_choice","yes_no","integer"]

    questionConfig:
      type: object
      properties:
        desc:
          type: string
          description: Detailed Question descriptions
          nullable: true
        options:
          type: array
          items: 
            type: object
            description: Options for Multiple choice/single choice questions
            properties:
              optionId:
                type: number
              optionName:
                type: string
    answers:
      type: object
      properties:
        questionId: 
          type: number
        answer:
          oneOf:
            - type: number
              description: For scale/integer/single choice questions
            - type: string
              description: For free text questions
            - type: array
              description: For multiple choice questions
              items: 
                type: number
            
    job:
      type: object
      properties:
        jobName:
          type: string
        jobDescription:
          type: string
        jobWebsite:
          type: string

    jobDetailed:
      type: object
      description: This extends the job model and provides more information.
      allOf:
        - $ref: "#/components/schemas/job"
      properties:
        jobId:
          type: number
        jobUuid:
          type: string
        userId:
          type: string
          description: ID of user who created the job
        active:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
    
    jobDetailedWithCreator:
      type: object
      description: This extends the job model and provides more information.
      allOf:
        - $ref: "#/components/schemas/job"
        - $ref: "#/components/schemas/jobDetailed"
      properties:
        user:          
          $ref: "#/components/schemas/User"
    
    jobApplication:
      type: object
      properties:
        jobId:
          type: number
        isApplied:
          type: boolean
        isWithdrawn:
          type: boolean
        status:
          type: string
    
    jobApplicationDetailed:
      type: object
      description: This extends detailed jobs to include applications
      allOf:
        - $ref: "#/components/schemas/jobDetailed"
        - $ref: "#/components/schemas/jobApplication"
      properties:
        applicationId:
          type: number  
      
    jobApplicationWithOnlyJobId:
      type: object
      properties:
        jobId:
          type: number
        
    jobDetailedWithIsApplied:
      type: object
      description: This extends the job model and provides more information.
      allOf:
        - $ref: "#/components/schemas/job"
        - $ref: "#/components/schemas/jobDetailed"
      properties:
        isApplied:
          type: boolean
        quesRes:
          type: array
          items:
            $ref: "#/components/schemas/answers" 
    
    paginatedUsers:
      type: object
      description: This is the schema for paginated users' response.      
      properties:
        count:
          type: number        
        users:
          type: array
          items:
            $ref: "#/components/schemas/User" 

    meta:
      type: object
      description: This is the schema for user's meta data.      
      properties:
        umetaId:
          type: string
        userId:
          type: string
        metaKey:
          type: string
        metaValue:
          type: string
        