openapi: "3.0.0"
info:
  version: 1.0.0
  title: Empauwer Backend API documenations
  description: |
    # Introduction
    This API is documented in **OpenAPI 3.0 format**. \
    See https://redocly.github.io/redoc/ for more information.
  
servers:
  - url: http://localhost:4585/em/api/v1
    description: Local development
  - url: https://empstag.x0pa.ai/em/api/v1/
    description: Staging environment
tags: 
  - name: User
    description: Information about the user
  - name: User Model
    x-displayName: The User Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/User" />
  - name: Question Model
    x-displayName: The Question Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Question" />
  - name: Answer Model
    x-displayName: The Answer Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/answers" />

paths:
  /account:
    post:
      summary: Create User
      tags:
        - User
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: me@mymail.com
                password:
                  type: string
                  example: password
                accountType:
                  type: string
                  enum: [candidate,employer,mentor]
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  userUuid:
                    type: string
                  userId:
                    type: number
                  email: 
                    type: string
        '400':
          description: Failed to create user
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  error:
                    type: boolean
                  message:
                    description: Describes reason for failure
                    type: string
                
  /login:
    post:
      summary: Login user
      # security:
      #   - bearerAuth: []
      tags:
        - User
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: me@mymail.com
                password:
                  type: string
                  example: password
  
      responses:
        '200':
          description: Successful login
          content:
            application/json: 
              schema:
                type: object
                properties: 
                    User: 
                      $ref: "#/components/schemas/User"
                    token:
                      type: string
                      description: JWT to be used for authorization 

  /account/me:
    get: 
      summary: Get user info
      security:
      - bearerAuth: []
      tags:
        - User
      responses:
        '200':
          description: Successfully get user information
          content:
            application/json: 
              schema:
                type: object
                $ref: "#/components/schemas/User"
  /account/{userUuid}/: 
    patch:
      summary: Update user info
      parameters:
        - name: userUuid
          in: path
          description: UUID of User
          required: true
          schema:
            type: integer
            format: int64
      security:
      - bearerAuth: []
      tags:
        - User
      requestBody: 
        content:
          application/json: 
            schema:
              type: object
              properties:
                active:
                  type: boolean
                  nullable: true
                firstName:
                  type: string
                  nullable: true
                lastName:
                  type: string
                  nullable: true
                isAdmin:
                  type: boolean
                  nullable: true
                tzid:
                  type: number
                  nullable: true
                primaryMobile:
                  type: string
                  nullable: true
                roleId:
                  type: number
                  nullable: true
      responses:
        '200':
          description: Successfully updated user info
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"
  /account/forget-password: 
    post: 
      summary: Forget user password
      tags:
        - User
      requestBody: 
        content:
          application/json: 
            schema:
              type: object
              properties:
                email: 
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json: 
             schema: 
              properties:
                requestId:
                  type: number
                requestKey:
                  type: string
                userId:
                  type: number 
                expiresAt:
                  type: string
                resourceType:
                  type: string
                actionType:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
  /account/reset-password/{passwordResetToken}:
    patch: 
      summary: Reset password
      tags:
        - User
      parameters:
        - name: passwordResetToken
          in: path
          description: Password reset token from ?
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema:
              type: object
              properties:
                password1: 
                  type: string
                password2:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: Password updation successful

  /account/empauwer-me:
    get:
      tags:
      - User
      security:
      - bearerAuth: []
      description:  Get Empauwer Me Questionnaire
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/Question"

  /account/empauwer-all:
    get:
      tags:
      - User
      security:
      - bearerAuth: []
      description:  Get Empauwer All Questionnaire
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/Question"
  /account/profile:
    post:
      tags:
      - User
      security:
      - bearerAuth: []
      description:  Create profile/Answer Questions
      requestBody:
        content:
          application/json: 
            schema:
              type: array
              items:
                $ref: "#/components/schemas/answers"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: "#/components/schemas/answers"
    get:
      tags:
      - User
      security:
      - bearerAuth: []
      description:  Get profile/Answered Questions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: "#/components/schemas/answers" 
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      type: object
      properties:
        userId: 
          type: number
        useruuid:
          type: number
        email:
          type: string
        roleId:
          type: number
        active:
          type: boolean
        companyId:
          type: number
        companyUuid:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        picture:
          type: string
        isAdmin:
          type: boolean
        tzid:
          type: number
        primaryMobile:
          type: string
    Question:
      type: object
      properties:
        questionId:
          type: string
        questioName:
          type: string
        questionConfig:
          $ref: "#/components/schemas/questionConfig"
        questionTypeName:
          type: string
          enum: ["scale5","scale10","subjective","single_choice","multiple_choice","yes_no","integer"]

    questionConfig:
      type: object
      properties:
        desc:
          type: string
          description: Detailed Question descriptions
          nullable: true
        options:
          type: array
          items: 
            type: object
            description: Options for Multiple choice/single choice questions
            properties:
              optionId:
                type: number
              optionName:
                type: string
    answers:
      type: object
      properties:
        questionId: 
          type: number
        answer:
          oneOf:
            - type: number
              description: For scale/integer/single choice questions
            - type: string
              description: For free text questions
            - type: array
              description: For multiple choice questions
              items: 
                type: number
            
